package main

/*
// Generated by rust2go. Please DO NOT edit this C part manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct StringRef {
  const uint8_t *ptr;
  uintptr_t len;
} StringRef;

typedef struct ListRef {
  const void *ptr;
  uintptr_t len;
} ListRef;

typedef struct HelmEnvRef {
  struct ListRef kube_config;
  struct ListRef kube_context;
  struct ListRef kube_token;
  struct ListRef kube_ca_file;
  bool kube_insecure_skip_tls_verify;
} HelmEnvRef;

typedef struct AddRequestRef {
  struct StringRef name;
  struct StringRef url;
  struct StringRef username;
  struct StringRef password;
  bool password_from_stdin_opt;
  bool pass_credentials_all;
  bool force_update;
  bool allow_deprecated_repos;
  struct StringRef cert_file;
  struct StringRef key_file;
  struct StringRef ca_file;
  bool insecure_skip_tls_sverify;
  struct HelmEnvRef env;
} AddRequestRef;

typedef struct AddResponseRef {
  struct ListRef err;
} AddResponseRef;

typedef struct InstallRequestRef {
  struct StringRef release_name;
  struct StringRef chart;
  struct StringRef version;
  struct StringRef ns;
  bool wait;
  struct ListRef timeout;
  bool create_namespace;
  struct ListRef values;
  struct HelmEnvRef env;
  struct ListRef dry_run;
} InstallRequestRef;

typedef struct InstallResponseRef {
  struct ListRef err;
  struct StringRef data;
} InstallResponseRef;

typedef struct ListRequestRef {
  struct StringRef ns;
  struct HelmEnvRef env;
  bool all;
  bool all_namespaces;
  uint64_t sort;
  bool by_date;
  bool sort_reverse;
  uint64_t state_mask;
  int64_t limit;
  int64_t offset;
  struct StringRef filter;
  bool no_headers;
  struct StringRef time_format;
  bool uninstalled;
  bool superseded;
  bool uninstalling;
  bool deployed;
  bool failed;
  bool pending;
  struct StringRef selector;
} ListRequestRef;

typedef struct ListResponseRef {
  struct ListRef err;
  struct StringRef data;
} ListResponseRef;

typedef struct LoginRequestRef {
  struct StringRef hostname;
  struct StringRef username;
  struct StringRef password;
  struct StringRef cert_file;
  struct StringRef key_file;
  struct StringRef ca_file;
  bool insecure;
  bool plain_http;
  struct HelmEnvRef env;
} LoginRequestRef;

typedef struct LoginResponseRef {
  struct ListRef err;
} LoginResponseRef;

typedef struct SearchRequestRef {
  bool versions;
  struct StringRef regexp;
  bool devel;
  struct StringRef version;
  struct ListRef terms;
  struct HelmEnvRef env;
} SearchRequestRef;

typedef struct SearchResponseRef {
  struct ListRef err;
  struct StringRef data;
} SearchResponseRef;

typedef struct UninstallRequestRef {
  struct StringRef ns;
  struct StringRef release_name;
  bool disable_hooks;
  bool dry_run;
  bool ignore_not_found;
  bool keep_history;
  bool wait;
  struct StringRef deletion_propagation;
  struct ListRef timeout;
  struct StringRef description;
  struct HelmEnvRef env;
} UninstallRequestRef;

typedef struct UninstallResponseRef {
  struct ListRef err;
  struct StringRef data;
} UninstallResponseRef;

typedef struct UpgradeRequestRef {
  struct StringRef release_name;
  struct StringRef chart;
  struct StringRef version;
  struct StringRef ns;
  bool wait;
  struct ListRef timeout;
  struct ListRef values;
  struct HelmEnvRef env;
  bool reset_values;
  bool reuse_values;
  struct ListRef dry_run;
} UpgradeRequestRef;

typedef struct UpgradeResponseRef {
  struct ListRef err;
  struct StringRef data;
} UpgradeResponseRef;
*/
import "C"
import (
	"runtime"
	"unsafe"

	"github.com/ihciah/rust2go/asmcall"
)

var HelmCallImpl HelmCall

type HelmCall interface {
	install(req *InstallRequest) InstallResponse
	upgrade(req *UpgradeRequest) UpgradeResponse
	uninstall(req *UninstallRequest) UninstallResponse
	list(req *ListRequest) ListResponse
	repo_add(req *AddRequest) AddResponse
	repo_search(req *SearchRequest) SearchResponse
	registry_login(req *LoginRequest) LoginResponse
}

//export CHelmCall_install
func CHelmCall_install(req C.InstallRequestRef, slot *C.void, cb *C.void) {
	_new_req := newInstallRequest(req)
	go func() {
		resp := HelmCallImpl.install(&_new_req)
		resp_ref, buffer := cvt_ref(cntInstallResponse, refInstallResponse)(&resp)
		asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
		runtime.KeepAlive(resp_ref)
		runtime.KeepAlive(resp)
		runtime.KeepAlive(buffer)
	}()
}

//export CHelmCall_upgrade
func CHelmCall_upgrade(req C.UpgradeRequestRef, slot *C.void, cb *C.void) {
	_new_req := newUpgradeRequest(req)
	go func() {
		resp := HelmCallImpl.upgrade(&_new_req)
		resp_ref, buffer := cvt_ref(cntUpgradeResponse, refUpgradeResponse)(&resp)
		asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
		runtime.KeepAlive(resp_ref)
		runtime.KeepAlive(resp)
		runtime.KeepAlive(buffer)
	}()
}

//export CHelmCall_uninstall
func CHelmCall_uninstall(req C.UninstallRequestRef, slot *C.void, cb *C.void) {
	_new_req := newUninstallRequest(req)
	go func() {
		resp := HelmCallImpl.uninstall(&_new_req)
		resp_ref, buffer := cvt_ref(cntUninstallResponse, refUninstallResponse)(&resp)
		asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
		runtime.KeepAlive(resp_ref)
		runtime.KeepAlive(resp)
		runtime.KeepAlive(buffer)
	}()
}

//export CHelmCall_list
func CHelmCall_list(req C.ListRequestRef, slot *C.void, cb *C.void) {
	_new_req := newListRequest(req)
	go func() {
		resp := HelmCallImpl.list(&_new_req)
		resp_ref, buffer := cvt_ref(cntListResponse, refListResponse)(&resp)
		asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
		runtime.KeepAlive(resp_ref)
		runtime.KeepAlive(resp)
		runtime.KeepAlive(buffer)
	}()
}

//export CHelmCall_repo_add
func CHelmCall_repo_add(req C.AddRequestRef, slot *C.void, cb *C.void) {
	_new_req := newAddRequest(req)
	go func() {
		resp := HelmCallImpl.repo_add(&_new_req)
		resp_ref, buffer := cvt_ref(cntAddResponse, refAddResponse)(&resp)
		asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
		runtime.KeepAlive(resp_ref)
		runtime.KeepAlive(resp)
		runtime.KeepAlive(buffer)
	}()
}

//export CHelmCall_repo_search
func CHelmCall_repo_search(req C.SearchRequestRef, slot *C.void, cb *C.void) {
	_new_req := newSearchRequest(req)
	go func() {
		resp := HelmCallImpl.repo_search(&_new_req)
		resp_ref, buffer := cvt_ref(cntSearchResponse, refSearchResponse)(&resp)
		asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
		runtime.KeepAlive(resp_ref)
		runtime.KeepAlive(resp)
		runtime.KeepAlive(buffer)
	}()
}

//export CHelmCall_registry_login
func CHelmCall_registry_login(req C.LoginRequestRef, slot *C.void, cb *C.void) {
	_new_req := newLoginRequest(req)
	go func() {
		resp := HelmCallImpl.registry_login(&_new_req)
		resp_ref, buffer := cvt_ref(cntLoginResponse, refLoginResponse)(&resp)
		asmcall.CallFuncG0P2(unsafe.Pointer(cb), unsafe.Pointer(&resp_ref), unsafe.Pointer(slot))
		runtime.KeepAlive(resp_ref)
		runtime.KeepAlive(resp)
		runtime.KeepAlive(buffer)
	}()
}

func newString(s_ref C.StringRef) string {
	return unsafe.String((*byte)(unsafe.Pointer(s_ref.ptr)), s_ref.len)
}
func refString(s *string, _ *[]byte) C.StringRef {
	return C.StringRef{
		ptr: (*C.uint8_t)(unsafe.StringData(*s)),
		len: C.uintptr_t(len(*s)),
	}
}

func ownString(s_ref C.StringRef) string {
	return string(unsafe.Slice((*byte)(unsafe.Pointer(s_ref.ptr)), int(s_ref.len)))
}
func cntString(_ *string, _ *uint) [0]C.StringRef { return [0]C.StringRef{} }
func new_list_mapper[T1, T2 any](f func(T1) T2) func(C.ListRef) []T2 {
	return func(x C.ListRef) []T2 {
		input := unsafe.Slice((*T1)(unsafe.Pointer(x.ptr)), x.len)
		output := make([]T2, len(input))
		for i, v := range input {
			output[i] = f(v)
		}
		return output
	}
}
func new_list_mapper_primitive[T1, T2 any](_ func(T1) T2) func(C.ListRef) []T2 {
	return func(x C.ListRef) []T2 {
		return unsafe.Slice((*T2)(unsafe.Pointer(x.ptr)), x.len)
	}
}

// only handle non-primitive type T
func cnt_list_mapper[T, R any](f func(s *T, cnt *uint) [0]R) func(s *[]T, cnt *uint) [0]C.ListRef {
	return func(s *[]T, cnt *uint) [0]C.ListRef {
		for _, v := range *s {
			f(&v, cnt)
		}
		*cnt += uint(len(*s)) * size_of[R]()
		return [0]C.ListRef{}
	}
}

// only handle primitive type T
func cnt_list_mapper_primitive[T, R any](_ func(s *T, cnt *uint) [0]R) func(s *[]T, cnt *uint) [0]C.ListRef {
	return func(s *[]T, cnt *uint) [0]C.ListRef { return [0]C.ListRef{} }
}

// only handle non-primitive type T
func ref_list_mapper[T, R any](f func(s *T, buffer *[]byte) R) func(s *[]T, buffer *[]byte) C.ListRef {
	return func(s *[]T, buffer *[]byte) C.ListRef {
		if len(*buffer) == 0 {
			return C.ListRef{
				ptr: unsafe.Pointer(nil),
				len: C.uintptr_t(len(*s)),
			}
		}
		ret := C.ListRef{
			ptr: unsafe.Pointer(&(*buffer)[0]),
			len: C.uintptr_t(len(*s)),
		}
		children_bytes := int(size_of[R]()) * len(*s)
		children := (*buffer)[:children_bytes]
		*buffer = (*buffer)[children_bytes:]
		for _, v := range *s {
			child := f(&v, buffer)
			len := unsafe.Sizeof(child)
			copy(children, unsafe.Slice((*byte)(unsafe.Pointer(&child)), len))
			children = children[len:]
		}
		return ret
	}
}

// only handle primitive type T
func ref_list_mapper_primitive[T, R any](_ func(s *T, buffer *[]byte) R) func(s *[]T, buffer *[]byte) C.ListRef {
	return func(s *[]T, buffer *[]byte) C.ListRef {
		if len(*s) == 0 {
			return C.ListRef{
				ptr: unsafe.Pointer(nil),
				len: C.uintptr_t(0),
			}
		}
		return C.ListRef{
			ptr: unsafe.Pointer(&(*s)[0]),
			len: C.uintptr_t(len(*s)),
		}
	}
}
func size_of[T any]() uint {
	var t T
	return uint(unsafe.Sizeof(t))
}
func cvt_ref[R, CR any](cnt_f func(s *R, cnt *uint) [0]CR, ref_f func(p *R, buffer *[]byte) CR) func(p *R) (CR, []byte) {
	return func(p *R) (CR, []byte) {
		var cnt uint
		cnt_f(p, &cnt)
		buffer := make([]byte, cnt)
		return ref_f(p, &buffer), buffer
	}
}
func cvt_ref_cap[R, CR any](cnt_f func(s *R, cnt *uint) [0]CR, ref_f func(p *R, buffer *[]byte) CR, add_cap uint) func(p *R) (CR, []byte) {
	return func(p *R) (CR, []byte) {
		var cnt uint
		cnt_f(p, &cnt)
		buffer := make([]byte, cnt, cnt+add_cap)
		return ref_f(p, &buffer), buffer
	}
}

func newC_uint8_t(n C.uint8_t) uint8    { return uint8(n) }
func newC_uint16_t(n C.uint16_t) uint16 { return uint16(n) }
func newC_uint32_t(n C.uint32_t) uint32 { return uint32(n) }
func newC_uint64_t(n C.uint64_t) uint64 { return uint64(n) }
func newC_int8_t(n C.int8_t) int8       { return int8(n) }
func newC_int16_t(n C.int16_t) int16    { return int16(n) }
func newC_int32_t(n C.int32_t) int32    { return int32(n) }
func newC_int64_t(n C.int64_t) int64    { return int64(n) }
func newC_bool(n C.bool) bool           { return bool(n) }
func newC_uintptr_t(n C.uintptr_t) uint { return uint(n) }
func newC_intptr_t(n C.intptr_t) int    { return int(n) }
func newC_float(n C.float) float32      { return float32(n) }
func newC_double(n C.double) float64    { return float64(n) }

func cntC_uint8_t(_ *uint8, _ *uint) [0]C.uint8_t    { return [0]C.uint8_t{} }
func cntC_uint16_t(_ *uint16, _ *uint) [0]C.uint16_t { return [0]C.uint16_t{} }
func cntC_uint32_t(_ *uint32, _ *uint) [0]C.uint32_t { return [0]C.uint32_t{} }
func cntC_uint64_t(_ *uint64, _ *uint) [0]C.uint64_t { return [0]C.uint64_t{} }
func cntC_int8_t(_ *int8, _ *uint) [0]C.int8_t       { return [0]C.int8_t{} }
func cntC_int16_t(_ *int16, _ *uint) [0]C.int16_t    { return [0]C.int16_t{} }
func cntC_int32_t(_ *int32, _ *uint) [0]C.int32_t    { return [0]C.int32_t{} }
func cntC_int64_t(_ *int64, _ *uint) [0]C.int64_t    { return [0]C.int64_t{} }
func cntC_bool(_ *bool, _ *uint) [0]C.bool           { return [0]C.bool{} }
func cntC_uintptr_t(_ *uint, _ *uint) [0]C.uintptr_t { return [0]C.uintptr_t{} }
func cntC_intptr_t(_ *int, _ *uint) [0]C.intptr_t    { return [0]C.intptr_t{} }
func cntC_float(_ *float32, _ *uint) [0]C.float      { return [0]C.float{} }
func cntC_double(_ *float64, _ *uint) [0]C.double    { return [0]C.double{} }

func refC_uint8_t(p *uint8, _ *[]byte) C.uint8_t    { return C.uint8_t(*p) }
func refC_uint16_t(p *uint16, _ *[]byte) C.uint16_t { return C.uint16_t(*p) }
func refC_uint32_t(p *uint32, _ *[]byte) C.uint32_t { return C.uint32_t(*p) }
func refC_uint64_t(p *uint64, _ *[]byte) C.uint64_t { return C.uint64_t(*p) }
func refC_int8_t(p *int8, _ *[]byte) C.int8_t       { return C.int8_t(*p) }
func refC_int16_t(p *int16, _ *[]byte) C.int16_t    { return C.int16_t(*p) }
func refC_int32_t(p *int32, _ *[]byte) C.int32_t    { return C.int32_t(*p) }
func refC_int64_t(p *int64, _ *[]byte) C.int64_t    { return C.int64_t(*p) }
func refC_bool(p *bool, _ *[]byte) C.bool           { return C.bool(*p) }
func refC_uintptr_t(p *uint, _ *[]byte) C.uintptr_t { return C.uintptr_t(*p) }
func refC_intptr_t(p *int, _ *[]byte) C.intptr_t    { return C.intptr_t(*p) }
func refC_float(p *float32, _ *[]byte) C.float      { return C.float(*p) }
func refC_double(p *float64, _ *[]byte) C.double    { return C.double(*p) }

type InstallRequest struct {
	release_name     string
	chart            string
	version          string
	ns               string
	wait             bool
	timeout          []int64
	create_namespace bool
	values           []uint8
	env              HelmEnv
	dry_run          []string
}

func newInstallRequest(p C.InstallRequestRef) InstallRequest {
	return InstallRequest{
		release_name:     newString(p.release_name),
		chart:            newString(p.chart),
		version:          newString(p.version),
		ns:               newString(p.ns),
		wait:             newC_bool(p.wait),
		timeout:          new_list_mapper_primitive(newC_int64_t)(p.timeout),
		create_namespace: newC_bool(p.create_namespace),
		values:           new_list_mapper_primitive(newC_uint8_t)(p.values),
		env:              newHelmEnv(p.env),
		dry_run:          new_list_mapper(newString)(p.dry_run),
	}
}
func ownInstallRequest(p C.InstallRequestRef) InstallRequest {
	return InstallRequest{
		release_name:     ownString(p.release_name),
		chart:            ownString(p.chart),
		version:          ownString(p.version),
		ns:               ownString(p.ns),
		wait:             newC_bool(p.wait),
		timeout:          new_list_mapper(newC_int64_t)(p.timeout),
		create_namespace: newC_bool(p.create_namespace),
		values:           new_list_mapper(newC_uint8_t)(p.values),
		env:              ownHelmEnv(p.env),
		dry_run:          new_list_mapper(ownString)(p.dry_run),
	}
}
func cntInstallRequest(s *InstallRequest, cnt *uint) [0]C.InstallRequestRef {
	cntHelmEnv(&s.env, cnt)
	cnt_list_mapper(cntString)(&s.dry_run, cnt)
	return [0]C.InstallRequestRef{}
}
func refInstallRequest(p *InstallRequest, buffer *[]byte) C.InstallRequestRef {
	return C.InstallRequestRef{
		release_name:     refString(&p.release_name, buffer),
		chart:            refString(&p.chart, buffer),
		version:          refString(&p.version, buffer),
		ns:               refString(&p.ns, buffer),
		wait:             refC_bool(&p.wait, buffer),
		timeout:          ref_list_mapper_primitive(refC_int64_t)(&p.timeout, buffer),
		create_namespace: refC_bool(&p.create_namespace, buffer),
		values:           ref_list_mapper_primitive(refC_uint8_t)(&p.values, buffer),
		env:              refHelmEnv(&p.env, buffer),
		dry_run:          ref_list_mapper(refString)(&p.dry_run, buffer),
	}
}

type UpgradeRequest struct {
	release_name string
	chart        string
	version      string
	ns           string
	wait         bool
	timeout      []int64
	values       []uint8
	env          HelmEnv
	reset_values bool
	reuse_values bool
	dry_run      []string
}

func newUpgradeRequest(p C.UpgradeRequestRef) UpgradeRequest {
	return UpgradeRequest{
		release_name: newString(p.release_name),
		chart:        newString(p.chart),
		version:      newString(p.version),
		ns:           newString(p.ns),
		wait:         newC_bool(p.wait),
		timeout:      new_list_mapper_primitive(newC_int64_t)(p.timeout),
		values:       new_list_mapper_primitive(newC_uint8_t)(p.values),
		env:          newHelmEnv(p.env),
		reset_values: newC_bool(p.reset_values),
		reuse_values: newC_bool(p.reuse_values),
		dry_run:      new_list_mapper(newString)(p.dry_run),
	}
}
func ownUpgradeRequest(p C.UpgradeRequestRef) UpgradeRequest {
	return UpgradeRequest{
		release_name: ownString(p.release_name),
		chart:        ownString(p.chart),
		version:      ownString(p.version),
		ns:           ownString(p.ns),
		wait:         newC_bool(p.wait),
		timeout:      new_list_mapper(newC_int64_t)(p.timeout),
		values:       new_list_mapper(newC_uint8_t)(p.values),
		env:          ownHelmEnv(p.env),
		reset_values: newC_bool(p.reset_values),
		reuse_values: newC_bool(p.reuse_values),
		dry_run:      new_list_mapper(ownString)(p.dry_run),
	}
}
func cntUpgradeRequest(s *UpgradeRequest, cnt *uint) [0]C.UpgradeRequestRef {
	cntHelmEnv(&s.env, cnt)
	cnt_list_mapper(cntString)(&s.dry_run, cnt)
	return [0]C.UpgradeRequestRef{}
}
func refUpgradeRequest(p *UpgradeRequest, buffer *[]byte) C.UpgradeRequestRef {
	return C.UpgradeRequestRef{
		release_name: refString(&p.release_name, buffer),
		chart:        refString(&p.chart, buffer),
		version:      refString(&p.version, buffer),
		ns:           refString(&p.ns, buffer),
		wait:         refC_bool(&p.wait, buffer),
		timeout:      ref_list_mapper_primitive(refC_int64_t)(&p.timeout, buffer),
		values:       ref_list_mapper_primitive(refC_uint8_t)(&p.values, buffer),
		env:          refHelmEnv(&p.env, buffer),
		reset_values: refC_bool(&p.reset_values, buffer),
		reuse_values: refC_bool(&p.reuse_values, buffer),
		dry_run:      ref_list_mapper(refString)(&p.dry_run, buffer),
	}
}

type HelmEnv struct {
	kube_config                   []string
	kube_context                  []string
	kube_token                    []string
	kube_ca_file                  []string
	kube_insecure_skip_tls_verify bool
}

func newHelmEnv(p C.HelmEnvRef) HelmEnv {
	return HelmEnv{
		kube_config:                   new_list_mapper(newString)(p.kube_config),
		kube_context:                  new_list_mapper(newString)(p.kube_context),
		kube_token:                    new_list_mapper(newString)(p.kube_token),
		kube_ca_file:                  new_list_mapper(newString)(p.kube_ca_file),
		kube_insecure_skip_tls_verify: newC_bool(p.kube_insecure_skip_tls_verify),
	}
}
func ownHelmEnv(p C.HelmEnvRef) HelmEnv {
	return HelmEnv{
		kube_config:                   new_list_mapper(ownString)(p.kube_config),
		kube_context:                  new_list_mapper(ownString)(p.kube_context),
		kube_token:                    new_list_mapper(ownString)(p.kube_token),
		kube_ca_file:                  new_list_mapper(ownString)(p.kube_ca_file),
		kube_insecure_skip_tls_verify: newC_bool(p.kube_insecure_skip_tls_verify),
	}
}
func cntHelmEnv(s *HelmEnv, cnt *uint) [0]C.HelmEnvRef {
	cnt_list_mapper(cntString)(&s.kube_config, cnt)
	cnt_list_mapper(cntString)(&s.kube_context, cnt)
	cnt_list_mapper(cntString)(&s.kube_token, cnt)
	cnt_list_mapper(cntString)(&s.kube_ca_file, cnt)
	return [0]C.HelmEnvRef{}
}
func refHelmEnv(p *HelmEnv, buffer *[]byte) C.HelmEnvRef {
	return C.HelmEnvRef{
		kube_config:                   ref_list_mapper(refString)(&p.kube_config, buffer),
		kube_context:                  ref_list_mapper(refString)(&p.kube_context, buffer),
		kube_token:                    ref_list_mapper(refString)(&p.kube_token, buffer),
		kube_ca_file:                  ref_list_mapper(refString)(&p.kube_ca_file, buffer),
		kube_insecure_skip_tls_verify: refC_bool(&p.kube_insecure_skip_tls_verify, buffer),
	}
}

type InstallResponse struct {
	err  []string
	data string
}

func newInstallResponse(p C.InstallResponseRef) InstallResponse {
	return InstallResponse{
		err:  new_list_mapper(newString)(p.err),
		data: newString(p.data),
	}
}
func ownInstallResponse(p C.InstallResponseRef) InstallResponse {
	return InstallResponse{
		err:  new_list_mapper(ownString)(p.err),
		data: ownString(p.data),
	}
}
func cntInstallResponse(s *InstallResponse, cnt *uint) [0]C.InstallResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.InstallResponseRef{}
}
func refInstallResponse(p *InstallResponse, buffer *[]byte) C.InstallResponseRef {
	return C.InstallResponseRef{
		err:  ref_list_mapper(refString)(&p.err, buffer),
		data: refString(&p.data, buffer),
	}
}

type UpgradeResponse struct {
	err  []string
	data string
}

func newUpgradeResponse(p C.UpgradeResponseRef) UpgradeResponse {
	return UpgradeResponse{
		err:  new_list_mapper(newString)(p.err),
		data: newString(p.data),
	}
}
func ownUpgradeResponse(p C.UpgradeResponseRef) UpgradeResponse {
	return UpgradeResponse{
		err:  new_list_mapper(ownString)(p.err),
		data: ownString(p.data),
	}
}
func cntUpgradeResponse(s *UpgradeResponse, cnt *uint) [0]C.UpgradeResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.UpgradeResponseRef{}
}
func refUpgradeResponse(p *UpgradeResponse, buffer *[]byte) C.UpgradeResponseRef {
	return C.UpgradeResponseRef{
		err:  ref_list_mapper(refString)(&p.err, buffer),
		data: refString(&p.data, buffer),
	}
}

type ListRequest struct {
	ns             string
	env            HelmEnv
	all            bool
	all_namespaces bool
	sort           uint64
	by_date        bool
	sort_reverse   bool
	state_mask     uint64
	limit          int64
	offset         int64
	filter         string
	no_headers     bool
	time_format    string
	uninstalled    bool
	superseded     bool
	uninstalling   bool
	deployed       bool
	failed         bool
	pending        bool
	selector       string
}

func newListRequest(p C.ListRequestRef) ListRequest {
	return ListRequest{
		ns:             newString(p.ns),
		env:            newHelmEnv(p.env),
		all:            newC_bool(p.all),
		all_namespaces: newC_bool(p.all_namespaces),
		sort:           newC_uint64_t(p.sort),
		by_date:        newC_bool(p.by_date),
		sort_reverse:   newC_bool(p.sort_reverse),
		state_mask:     newC_uint64_t(p.state_mask),
		limit:          newC_int64_t(p.limit),
		offset:         newC_int64_t(p.offset),
		filter:         newString(p.filter),
		no_headers:     newC_bool(p.no_headers),
		time_format:    newString(p.time_format),
		uninstalled:    newC_bool(p.uninstalled),
		superseded:     newC_bool(p.superseded),
		uninstalling:   newC_bool(p.uninstalling),
		deployed:       newC_bool(p.deployed),
		failed:         newC_bool(p.failed),
		pending:        newC_bool(p.pending),
		selector:       newString(p.selector),
	}
}
func ownListRequest(p C.ListRequestRef) ListRequest {
	return ListRequest{
		ns:             ownString(p.ns),
		env:            ownHelmEnv(p.env),
		all:            newC_bool(p.all),
		all_namespaces: newC_bool(p.all_namespaces),
		sort:           newC_uint64_t(p.sort),
		by_date:        newC_bool(p.by_date),
		sort_reverse:   newC_bool(p.sort_reverse),
		state_mask:     newC_uint64_t(p.state_mask),
		limit:          newC_int64_t(p.limit),
		offset:         newC_int64_t(p.offset),
		filter:         ownString(p.filter),
		no_headers:     newC_bool(p.no_headers),
		time_format:    ownString(p.time_format),
		uninstalled:    newC_bool(p.uninstalled),
		superseded:     newC_bool(p.superseded),
		uninstalling:   newC_bool(p.uninstalling),
		deployed:       newC_bool(p.deployed),
		failed:         newC_bool(p.failed),
		pending:        newC_bool(p.pending),
		selector:       ownString(p.selector),
	}
}
func cntListRequest(s *ListRequest, cnt *uint) [0]C.ListRequestRef {
	cntHelmEnv(&s.env, cnt)
	return [0]C.ListRequestRef{}
}
func refListRequest(p *ListRequest, buffer *[]byte) C.ListRequestRef {
	return C.ListRequestRef{
		ns:             refString(&p.ns, buffer),
		env:            refHelmEnv(&p.env, buffer),
		all:            refC_bool(&p.all, buffer),
		all_namespaces: refC_bool(&p.all_namespaces, buffer),
		sort:           refC_uint64_t(&p.sort, buffer),
		by_date:        refC_bool(&p.by_date, buffer),
		sort_reverse:   refC_bool(&p.sort_reverse, buffer),
		state_mask:     refC_uint64_t(&p.state_mask, buffer),
		limit:          refC_int64_t(&p.limit, buffer),
		offset:         refC_int64_t(&p.offset, buffer),
		filter:         refString(&p.filter, buffer),
		no_headers:     refC_bool(&p.no_headers, buffer),
		time_format:    refString(&p.time_format, buffer),
		uninstalled:    refC_bool(&p.uninstalled, buffer),
		superseded:     refC_bool(&p.superseded, buffer),
		uninstalling:   refC_bool(&p.uninstalling, buffer),
		deployed:       refC_bool(&p.deployed, buffer),
		failed:         refC_bool(&p.failed, buffer),
		pending:        refC_bool(&p.pending, buffer),
		selector:       refString(&p.selector, buffer),
	}
}

type ListResponse struct {
	err  []string
	data string
}

func newListResponse(p C.ListResponseRef) ListResponse {
	return ListResponse{
		err:  new_list_mapper(newString)(p.err),
		data: newString(p.data),
	}
}
func ownListResponse(p C.ListResponseRef) ListResponse {
	return ListResponse{
		err:  new_list_mapper(ownString)(p.err),
		data: ownString(p.data),
	}
}
func cntListResponse(s *ListResponse, cnt *uint) [0]C.ListResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.ListResponseRef{}
}
func refListResponse(p *ListResponse, buffer *[]byte) C.ListResponseRef {
	return C.ListResponseRef{
		err:  ref_list_mapper(refString)(&p.err, buffer),
		data: refString(&p.data, buffer),
	}
}

type SearchRequest struct {
	versions bool
	regexp   string
	devel    bool
	version  string
	terms    []string
	env      HelmEnv
}

func newSearchRequest(p C.SearchRequestRef) SearchRequest {
	return SearchRequest{
		versions: newC_bool(p.versions),
		regexp:   newString(p.regexp),
		devel:    newC_bool(p.devel),
		version:  newString(p.version),
		terms:    new_list_mapper(newString)(p.terms),
		env:      newHelmEnv(p.env),
	}
}
func ownSearchRequest(p C.SearchRequestRef) SearchRequest {
	return SearchRequest{
		versions: newC_bool(p.versions),
		regexp:   ownString(p.regexp),
		devel:    newC_bool(p.devel),
		version:  ownString(p.version),
		terms:    new_list_mapper(ownString)(p.terms),
		env:      ownHelmEnv(p.env),
	}
}
func cntSearchRequest(s *SearchRequest, cnt *uint) [0]C.SearchRequestRef {
	cnt_list_mapper(cntString)(&s.terms, cnt)
	cntHelmEnv(&s.env, cnt)
	return [0]C.SearchRequestRef{}
}
func refSearchRequest(p *SearchRequest, buffer *[]byte) C.SearchRequestRef {
	return C.SearchRequestRef{
		versions: refC_bool(&p.versions, buffer),
		regexp:   refString(&p.regexp, buffer),
		devel:    refC_bool(&p.devel, buffer),
		version:  refString(&p.version, buffer),
		terms:    ref_list_mapper(refString)(&p.terms, buffer),
		env:      refHelmEnv(&p.env, buffer),
	}
}

type SearchResponse struct {
	err  []string
	data string
}

func newSearchResponse(p C.SearchResponseRef) SearchResponse {
	return SearchResponse{
		err:  new_list_mapper(newString)(p.err),
		data: newString(p.data),
	}
}
func ownSearchResponse(p C.SearchResponseRef) SearchResponse {
	return SearchResponse{
		err:  new_list_mapper(ownString)(p.err),
		data: ownString(p.data),
	}
}
func cntSearchResponse(s *SearchResponse, cnt *uint) [0]C.SearchResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.SearchResponseRef{}
}
func refSearchResponse(p *SearchResponse, buffer *[]byte) C.SearchResponseRef {
	return C.SearchResponseRef{
		err:  ref_list_mapper(refString)(&p.err, buffer),
		data: refString(&p.data, buffer),
	}
}

type AddRequest struct {
	name                      string
	url                       string
	username                  string
	password                  string
	password_from_stdin_opt   bool
	pass_credentials_all      bool
	force_update              bool
	allow_deprecated_repos    bool
	cert_file                 string
	key_file                  string
	ca_file                   string
	insecure_skip_tls_sverify bool
	env                       HelmEnv
}

func newAddRequest(p C.AddRequestRef) AddRequest {
	return AddRequest{
		name:                      newString(p.name),
		url:                       newString(p.url),
		username:                  newString(p.username),
		password:                  newString(p.password),
		password_from_stdin_opt:   newC_bool(p.password_from_stdin_opt),
		pass_credentials_all:      newC_bool(p.pass_credentials_all),
		force_update:              newC_bool(p.force_update),
		allow_deprecated_repos:    newC_bool(p.allow_deprecated_repos),
		cert_file:                 newString(p.cert_file),
		key_file:                  newString(p.key_file),
		ca_file:                   newString(p.ca_file),
		insecure_skip_tls_sverify: newC_bool(p.insecure_skip_tls_sverify),
		env:                       newHelmEnv(p.env),
	}
}
func ownAddRequest(p C.AddRequestRef) AddRequest {
	return AddRequest{
		name:                      ownString(p.name),
		url:                       ownString(p.url),
		username:                  ownString(p.username),
		password:                  ownString(p.password),
		password_from_stdin_opt:   newC_bool(p.password_from_stdin_opt),
		pass_credentials_all:      newC_bool(p.pass_credentials_all),
		force_update:              newC_bool(p.force_update),
		allow_deprecated_repos:    newC_bool(p.allow_deprecated_repos),
		cert_file:                 ownString(p.cert_file),
		key_file:                  ownString(p.key_file),
		ca_file:                   ownString(p.ca_file),
		insecure_skip_tls_sverify: newC_bool(p.insecure_skip_tls_sverify),
		env:                       ownHelmEnv(p.env),
	}
}
func cntAddRequest(s *AddRequest, cnt *uint) [0]C.AddRequestRef {
	cntHelmEnv(&s.env, cnt)
	return [0]C.AddRequestRef{}
}
func refAddRequest(p *AddRequest, buffer *[]byte) C.AddRequestRef {
	return C.AddRequestRef{
		name:                      refString(&p.name, buffer),
		url:                       refString(&p.url, buffer),
		username:                  refString(&p.username, buffer),
		password:                  refString(&p.password, buffer),
		password_from_stdin_opt:   refC_bool(&p.password_from_stdin_opt, buffer),
		pass_credentials_all:      refC_bool(&p.pass_credentials_all, buffer),
		force_update:              refC_bool(&p.force_update, buffer),
		allow_deprecated_repos:    refC_bool(&p.allow_deprecated_repos, buffer),
		cert_file:                 refString(&p.cert_file, buffer),
		key_file:                  refString(&p.key_file, buffer),
		ca_file:                   refString(&p.ca_file, buffer),
		insecure_skip_tls_sverify: refC_bool(&p.insecure_skip_tls_sverify, buffer),
		env:                       refHelmEnv(&p.env, buffer),
	}
}

type AddResponse struct {
	err []string
}

func newAddResponse(p C.AddResponseRef) AddResponse {
	return AddResponse{
		err: new_list_mapper(newString)(p.err),
	}
}
func ownAddResponse(p C.AddResponseRef) AddResponse {
	return AddResponse{
		err: new_list_mapper(ownString)(p.err),
	}
}
func cntAddResponse(s *AddResponse, cnt *uint) [0]C.AddResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.AddResponseRef{}
}
func refAddResponse(p *AddResponse, buffer *[]byte) C.AddResponseRef {
	return C.AddResponseRef{
		err: ref_list_mapper(refString)(&p.err, buffer),
	}
}

type UninstallRequest struct {
	ns                   string
	release_name         string
	disable_hooks        bool
	dry_run              bool
	ignore_not_found     bool
	keep_history         bool
	wait                 bool
	deletion_propagation string
	timeout              []int64
	description          string
	env                  HelmEnv
}

func newUninstallRequest(p C.UninstallRequestRef) UninstallRequest {
	return UninstallRequest{
		ns:                   newString(p.ns),
		release_name:         newString(p.release_name),
		disable_hooks:        newC_bool(p.disable_hooks),
		dry_run:              newC_bool(p.dry_run),
		ignore_not_found:     newC_bool(p.ignore_not_found),
		keep_history:         newC_bool(p.keep_history),
		wait:                 newC_bool(p.wait),
		deletion_propagation: newString(p.deletion_propagation),
		timeout:              new_list_mapper_primitive(newC_int64_t)(p.timeout),
		description:          newString(p.description),
		env:                  newHelmEnv(p.env),
	}
}
func ownUninstallRequest(p C.UninstallRequestRef) UninstallRequest {
	return UninstallRequest{
		ns:                   ownString(p.ns),
		release_name:         ownString(p.release_name),
		disable_hooks:        newC_bool(p.disable_hooks),
		dry_run:              newC_bool(p.dry_run),
		ignore_not_found:     newC_bool(p.ignore_not_found),
		keep_history:         newC_bool(p.keep_history),
		wait:                 newC_bool(p.wait),
		deletion_propagation: ownString(p.deletion_propagation),
		timeout:              new_list_mapper(newC_int64_t)(p.timeout),
		description:          ownString(p.description),
		env:                  ownHelmEnv(p.env),
	}
}
func cntUninstallRequest(s *UninstallRequest, cnt *uint) [0]C.UninstallRequestRef {
	cntHelmEnv(&s.env, cnt)
	return [0]C.UninstallRequestRef{}
}
func refUninstallRequest(p *UninstallRequest, buffer *[]byte) C.UninstallRequestRef {
	return C.UninstallRequestRef{
		ns:                   refString(&p.ns, buffer),
		release_name:         refString(&p.release_name, buffer),
		disable_hooks:        refC_bool(&p.disable_hooks, buffer),
		dry_run:              refC_bool(&p.dry_run, buffer),
		ignore_not_found:     refC_bool(&p.ignore_not_found, buffer),
		keep_history:         refC_bool(&p.keep_history, buffer),
		wait:                 refC_bool(&p.wait, buffer),
		deletion_propagation: refString(&p.deletion_propagation, buffer),
		timeout:              ref_list_mapper_primitive(refC_int64_t)(&p.timeout, buffer),
		description:          refString(&p.description, buffer),
		env:                  refHelmEnv(&p.env, buffer),
	}
}

type UninstallResponse struct {
	err  []string
	data string
}

func newUninstallResponse(p C.UninstallResponseRef) UninstallResponse {
	return UninstallResponse{
		err:  new_list_mapper(newString)(p.err),
		data: newString(p.data),
	}
}
func ownUninstallResponse(p C.UninstallResponseRef) UninstallResponse {
	return UninstallResponse{
		err:  new_list_mapper(ownString)(p.err),
		data: ownString(p.data),
	}
}
func cntUninstallResponse(s *UninstallResponse, cnt *uint) [0]C.UninstallResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.UninstallResponseRef{}
}
func refUninstallResponse(p *UninstallResponse, buffer *[]byte) C.UninstallResponseRef {
	return C.UninstallResponseRef{
		err:  ref_list_mapper(refString)(&p.err, buffer),
		data: refString(&p.data, buffer),
	}
}

type LoginRequest struct {
	hostname   string
	username   string
	password   string
	cert_file  string
	key_file   string
	ca_file    string
	insecure   bool
	plain_http bool
	env        HelmEnv
}

func newLoginRequest(p C.LoginRequestRef) LoginRequest {
	return LoginRequest{
		hostname:   newString(p.hostname),
		username:   newString(p.username),
		password:   newString(p.password),
		cert_file:  newString(p.cert_file),
		key_file:   newString(p.key_file),
		ca_file:    newString(p.ca_file),
		insecure:   newC_bool(p.insecure),
		plain_http: newC_bool(p.plain_http),
		env:        newHelmEnv(p.env),
	}
}
func ownLoginRequest(p C.LoginRequestRef) LoginRequest {
	return LoginRequest{
		hostname:   ownString(p.hostname),
		username:   ownString(p.username),
		password:   ownString(p.password),
		cert_file:  ownString(p.cert_file),
		key_file:   ownString(p.key_file),
		ca_file:    ownString(p.ca_file),
		insecure:   newC_bool(p.insecure),
		plain_http: newC_bool(p.plain_http),
		env:        ownHelmEnv(p.env),
	}
}
func cntLoginRequest(s *LoginRequest, cnt *uint) [0]C.LoginRequestRef {
	cntHelmEnv(&s.env, cnt)
	return [0]C.LoginRequestRef{}
}
func refLoginRequest(p *LoginRequest, buffer *[]byte) C.LoginRequestRef {
	return C.LoginRequestRef{
		hostname:   refString(&p.hostname, buffer),
		username:   refString(&p.username, buffer),
		password:   refString(&p.password, buffer),
		cert_file:  refString(&p.cert_file, buffer),
		key_file:   refString(&p.key_file, buffer),
		ca_file:    refString(&p.ca_file, buffer),
		insecure:   refC_bool(&p.insecure, buffer),
		plain_http: refC_bool(&p.plain_http, buffer),
		env:        refHelmEnv(&p.env, buffer),
	}
}

type LoginResponse struct {
	err []string
}

func newLoginResponse(p C.LoginResponseRef) LoginResponse {
	return LoginResponse{
		err: new_list_mapper(newString)(p.err),
	}
}
func ownLoginResponse(p C.LoginResponseRef) LoginResponse {
	return LoginResponse{
		err: new_list_mapper(ownString)(p.err),
	}
}
func cntLoginResponse(s *LoginResponse, cnt *uint) [0]C.LoginResponseRef {
	cnt_list_mapper(cntString)(&s.err, cnt)
	return [0]C.LoginResponseRef{}
}
func refLoginResponse(p *LoginResponse, buffer *[]byte) C.LoginResponseRef {
	return C.LoginResponseRef{
		err: ref_list_mapper(refString)(&p.err, buffer),
	}
}
func main() {}
